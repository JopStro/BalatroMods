[manifest]
version = "0.1"
dump_lua = false
priority = 0

[[patches]]
[patches.module]
source = "js_utils.lua"
before = "game.lua"
name = "js_utils"

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.P_CENTER_POOLS = {"
position = "before"
payload = '''
local js_utils = require "js_utils"
js_utils.addCenters(self)
js_utils.addBlinds(self)
js_utils.addTags(self)
js_utils.addSeals(self)
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.sticker_map = {"
position = "before"
payload = '''
local js_utils = require "js_utils"
js_utils.addSharedSeals(self)
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "init_localization()"
position = "before"
payload = '''
local js_utils = require "js_utils"
js_utils.addLoc(self)
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "--Load in all atli defined above"
position = "before"
payload = '''
local js_utils = require "js_utils"
js_utils.addAtli(self)
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.PROFILES[G.SETTINGS.profile].MEMORY.deck = args.to_val"
position = "after"
payload = '''
for key, val in pairs(G.sticker_card.area.cards) do
  val.children.back = nil
  val:set_sprites(val.config.center)
end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif _center.set == 'Joker' or _center.consumeable or _center.set == 'Voucher' then"
position = "at"
payload = "elseif (_center.set == 'Joker' or _center.consumeable or _center.set == 'Voucher') and not _center.atlas then"
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.children.floating_sprite = Sprite(self.T.x, self.T.y, self.T.w, self.T.h, G.ASSET_ATLAS['Joker'], self.config.center.soul_pos)"
position = "at"
payload = "self.children.floating_sprite = Sprite(self.T.x, self.T.y, self.T.w, self.T.h, G.ASSET_ATLAS[_center.atlas or 'Joker'], self.config.center.soul_pos)"
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.children.back = Sprite(self.T.x, self.T.y, self.T.w, self.T.h, G.ASSET_ATLAS[\"centers\"], self.params.bypass_back or (self.playing_card and G.GAME[self.back].pos or G.P_CENTERS['b_red'].pos))"
position = "at"
payload = "self.children.back = Sprite(self.T.x, self.T.y, self.T.w, self.T.h, G.ASSET_ATLAS[self.playing_card and G.GAME[self.back].effect.center.atlas or \"centers\"], self.params.bypass_back or (self.playing_card and G.GAME[self.back].pos or G.P_CENTERS['b_red'].pos))"
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "self.children.animatedSprite:set_sprite_pos(self.config.blind.pos)"
position = "before"
payload = "self.children.animatedSprite.atlas = G.ANIMATION_ATLAS[self.config.blind.atlas or 'blind_chips']"
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "blind_choice.animation = AnimatedSprite(0,0, 1.4, 1.4, G.ANIMATION_ATLAS['blind_chips'],  blind_choice.config.pos)"
position = "at"
payload = "blind_choice.animation = AnimatedSprite(0,0, 1.4, 1.4, G.ANIMATION_ATLAS[blind_choice.config.atlas or 'blind_chips'],  blind_choice.config.pos)"
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "local temp_blind = AnimatedSprite(0,0,1.3,1.3, G.ANIMATION_ATLAS['blind_chips'], discovered and v.pos or G.b_undiscovered.pos)"
position = "at"
payload = "local temp_blind = AnimatedSprite(0,0,1.3,1.3, G.ANIMATION_ATLAS[discovered and v.atlas or 'blind_chips'], discovered and v.pos or G.b_undiscovered.pos)"
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local blind_sprite = AnimatedSprite(0, 0, 1.2,1.2, G.ANIMATION_ATLAS['blind_chips'], copy_table(G.GAME.blind.pos))"
position = "at"
payload = "local blind_sprite = AnimatedSprite(0, 0, 1.2,1.2, G.ANIMATION_ATLAS[G.GAME.blind.config.blind.atlas or 'blind_chips'], copy_table(G.GAME.blind.pos))"
match_indent = true
overwrite = true


[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "for k, v in ipairs(blind_tab) do"
position = "after"
payload = '''
  -- expand matrix if additional blinds exist
  if k > 30 and k % 5 == 1 then
    table.insert(blind_matrix, {})
  end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "function create_UIBox_your_collection_blinds(exit)"
position = "after"
payload = '''
  local js_utils = require "js_utils"
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "{n=G.UIT.R, config={align = \"cm\"}, nodes=blind_matrix[6]},"
position = "after"
payload = '''
unpack(js_utils.gen_additional_nodes(7,blind_matrix))
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "self.pos = proto.pos"
position = "after"
payload = "self.atlas = proto.atlas or \"tags\""
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "local tag_sprite = Sprite(0,0,_size*1,_size*1,G.ASSET_ATLAS[\"tags\"], (self.hide_ability) and G.tag_undiscovered.pos or self.pos)"
position = "at"
payload = "local tag_sprite = Sprite(0,0,_size*1,_size*1,G.ASSET_ATLAS[self.atlas], (self.hide_ability) and G.tag_undiscovered.pos or self.pos)"
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "for k, v in ipairs(tag_tab) do"
position = "after"
payload = '''
  -- expand matrix if additional tags exist
  if k > 24 and k % 6 == 1 then
    table.insert(tag_matrix, {})
  end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "function create_UIBox_your_collection_tags()"
position = "after"
payload = '''
  local js_utils = require "js_utils"
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "{n=G.UIT.R, config={align = \"cm\"}, nodes=tag_matrix[4]},"
position = "after"
payload = '''
unpack(js_utils.gen_additional_nodes(5,tag_matrix))
'''
match_indent = true
overwrite = false

